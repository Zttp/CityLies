import { DisplayValueHeader, Color, Vector3 } from 'pixel_combats/basic';
import { Game, Map, Players, Inventory, LeaderBoard, Teams, Damage, Ui, Properties, Spawns, Timers, Chat } from 'pixel_combats/room';

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
const CONFIG = {
    DAY_NIGHT_CYCLE: 300, // 5 –º–∏–Ω—É—Ç –Ω–∞ —Ñ–∞–∑—É
    TRAITOR_REVEAL_CHANCE: 0.3, // 30% —à–∞–Ω—Å —á—Ç–æ –ø—Ä–µ–¥–∞—Ç–µ–ª—å —É–∑–Ω–∞–µ—Ç –æ —Å–µ–±–µ
    DETECTIVE_CLUES: [
        "–ü—Ä–µ–¥–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–º–µ—á–µ–Ω –≤–æ–∑–ª–µ —Å–∫–ª–∞–¥–∞",
        "–ö—Ç–æ-—Ç–æ –ø–æ–¥–∫—É–ø–∏–ª –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞",
        "–ù–∞ –º–µ—Å—Ç–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ –æ—Ä—É–∂–∏–µ",
        "–°–≤–∏–¥–µ—Ç–µ–ª—å –≤–∏–¥–µ–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞"
    ]
};

// –¶–≤–µ—Ç–∞ —Ñ—Ä–∞–∫—Ü–∏–π
const FACTION_COLORS = {
    POLICE: new Color(0, 0, 1, 0),      // –°–∏–Ω–∏–π
    BANDITS: new Color(1, 0, 0, 0),     // –ö—Ä–∞—Å–Ω—ã–π
    MAYOR: new Color(1, 1, 0, 0),       // –ñ–µ–ª—Ç—ã–π
    MERCENARIES: new Color(0, 1, 0, 0), // –ó–µ–ª–µ–Ω—ã–π
    REVOLUTION: new Color(1, 0, 1, 0),  // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    DETECTIVE: new Color(0, 1, 1, 0),   // –ì–æ–ª—É–±–æ–π
    REPORTER: new Color(1, 1, 1, 0)     // –ë–µ–ª—ã–π
};

// –¢–∏–ø—ã —Ä–æ–ª–µ–π
const ROLE_TYPES = {
    TRAITOR: "–ü—Ä–µ–¥–∞—Ç–µ–ª—å",
    MANIAC: "–ú–∞–Ω—å—è–∫",
    DETECTIVE: "–î–µ—Ç–µ–∫—Ç–∏–≤",
    REPORTER: "–†–µ–ø–æ—Ä—Ç–µ—Ä",
    DEFAULT: "–ì–æ—Ä–æ–∂–∞–Ω–∏–Ω"
};

// ========== –°–ò–°–¢–ï–ú–ê –§–†–ê–ö–¶–ò–ô ==========
class FactionSystem {
    constructor() {
        this.factions = {
            POLICE: { name: "–ü–æ–ª–∏—Ü–∏—è", members: [], color: FACTION_COLORS.POLICE },
            BANDITS: { name: "–ë–∞–Ω–¥–∏—Ç—ã", members: [], color: FACTION_COLORS.BANDITS },
            MAYOR: { name: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", members: [], color: FACTION_COLORS.MAYOR },
            MERCENARIES: { name: "–ù–∞–µ–º–Ω–∏–∫–∏", members: [], color: FACTION_COLORS.MERCENARIES },
            REVOLUTION: { name: "–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–µ—Ä—ã", members: [], color: FACTION_COLORS.REVOLUTION }
        };
        
        this.playerRoles = {};
        this.traitors = new Set();
        this.dayNightPhase = "DAY";
    }

    initTeams() {
        for (const [id, data] of Object.entries(this.factions)) {
            if (!Teams.Get(id)) {
                Teams.Add(id, data.name, data.color);
                Teams.Get(id).Spawns.SpawnPointsGroups.Add(1);
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å–æ–±—ã—Ö —Ä–æ–ª–µ–π
        if (!Teams.Get(ROLE_TYPES.DETECTIVE)) {
            Teams.Add(ROLE_TYPES.DETECTIVE, ROLE_TYPES.DETECTIVE, FACTION_COLORS.DETECTIVE);
        }
        if (!Teams.Get(ROLE_TYPES.REPORTER)) {
            Teams.Add(ROLE_TYPES.REPORTER, ROLE_TYPES.REPORTER, FACTION_COLORS.REPORTER);
        }
    }

    assignPlayerToFaction(player, factionId) {
        if (this.factions[factionId]) {
            this.factions[factionId].members.push(player.id);
            this.playerRoles[player.id] = { faction: factionId, role: ROLE_TYPES.DEFAULT };
            Teams.Get(factionId).Add(player);
            player.Properties.Get("Faction").Value = factionId;
            player.Properties.Get("Role").Value = ROLE_TYPES.DEFAULT;
            return true;
        }
        return false;
    }

    assignSpecialRoles() {
        const players = Players.All.filter(p => !this.playerRoles[p.id]?.role);
        if (players.length < 4) return;

        // –í—ã–±–∏—Ä–∞–µ–º –¥–µ—Ç–µ–∫—Ç–∏–≤–∞
        const detective = players[Math.floor(Math.random() * players.length)];
        this.playerRoles[detective.id] = { role: ROLE_TYPES.DETECTIVE };
        Teams.Get(ROLE_TYPES.DETECTIVE).Add(detective);
        detective.Properties.Get("Role").Value = ROLE_TYPES.DETECTIVE;

        // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
        const reporter = players.find(p => p.id !== detective.id);
        if (reporter) {
            this.playerRoles[reporter.id] = { role: ROLE_TYPES.REPORTER };
            Teams.Get(ROLE_TYPES.REPORTER).Add(reporter);
            reporter.Properties.Get("Role").Value = ROLE_TYPES.REPORTER;
        }

        // –í—ã–±–∏—Ä–∞–µ–º –º–∞–Ω—å—è–∫–∞ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        if (players.length >= 6) {
            const maniac = players.find(p => !this.playerRoles[p.id]);
            if (maniac) {
                this.playerRoles[maniac.id] = { role: ROLE_TYPES.MANIAC };
                maniac.Properties.Get("Role").Value = ROLE_TYPES.MANIAC;
            }
        }
    }

    assignTraitors() {
        for (const [factionId, data] of Object.entries(this.factions)) {
            if (data.members.length > 1) {
                const traitorId = data.members[Math.floor(Math.random() * data.members.length)];
                this.traitors.add(traitorId);
                this.playerRoles[traitorId].role = ROLE_TYPES.TRAITOR;
                Players.Get(traitorId).Properties.Get("Role").Value = ROLE_TYPES.TRAITOR;
            }
        }
    }

    startDayNightCycle() {
        Timers.GetContext().Get("DayNightTimer").OnTimer.Add((timer) => {
            this.dayNightPhase = this.dayNightPhase === "DAY" ? "NIGHT" : "DAY";
            Chat.Broadcast(this.dayNightPhase === "DAY" ? 
                "‚òÄ –ù–∞—Å—Ç—É–ø–∞–µ—Ç –¥–µ–Ω—å. –î–µ—Ç–µ–∫—Ç–∏–≤ –∏—â–µ—Ç —É–ª–∏–∫–∏..." : 
                "üåô –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å... –ü—Ä–µ–¥–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è!");

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π –Ω–æ—á—å—é
            if (this.dayNightPhase === "NIGHT") {
                this.traitors.forEach(traitorId => {
                    const player = Players.Get(traitorId);
                    if (player && Math.random() < CONFIG.TRAITOR_REVEAL_CHANCE) {
                        player.Ui.Hint.Value = "–¢–´ –ü–†–ï–î–ê–¢–ï–õ–¨! –£–Ω–∏—á—Ç–æ–∂—å —Å–≤–æ—é —Ñ—Ä–∞–∫—Ü–∏—é –∏–∑–Ω—É—Ç—Ä–∏!";
                        Damage.GetContext(player).FriendlyFire.Value = true;
                    }
                });
            }

            // –î–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–µ—Ç–µ–∫—Ç–∏–≤—É –¥–Ω–µ–º
            if (this.dayNightPhase === "DAY") {
                for (const [playerId, roleData] of Object.entries(this.playerRoles)) {
                    if (roleData.role === ROLE_TYPES.DETECTIVE) {
                        const clue = CONFIG.DETECTIVE_CLUES[
                            Math.floor(Math.random() * CONFIG.DETECTIVE_CLUES.length)
                        ];
                        Players.Get(playerId).Ui.Hint.Value = `–ü–æ–¥—Å–∫–∞–∑–∫–∞: ${clue}`;
                    }
                }
            }

            timer.RestartLoop(CONFIG.DAY_NIGHT_CYCLE);
        }).RestartLoop(CONFIG.DAY_NIGHT_CYCLE);
    }
}

// ========== –û–°–ù–û–í–ù–û–ô –ö–û–î ==========
const factionSystem = new FactionSystem();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function InitGame() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤ —Å–µ—Ä–≤–µ—Ä–∞
    const Props = Properties.GetContext();
    Props.Get('GamePhase').Value = "DAY";
    Props.Get('Time_Hours').Value = 0;
    Props.Get('Time_Minutes').Value = 0;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–∞–∫—Ü–∏–π
    factionSystem.initTeams();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
    LeaderBoard.PlayerLeaderBoardValues = [
        new DisplayValueHeader('Kills', '–£–±–∏–π—Å—Ç–≤–∞', '–£–±–∏–π—Å—Ç–≤'),
        new DisplayValueHeader('Deaths', '–°–º–µ—Ä—Ç–∏', '–°–º–µ—Ä—Ç–µ–π'),
        new DisplayValueHeader('Faction', '–§—Ä–∞–∫—Ü–∏—è', '–§—Ä–∞–∫—Ü–∏—è'),
        new DisplayValueHeader('Role', '–†–æ–ª—å', '–†–æ–ª—å')
    ];

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–Ω–∞
    Damage.GetContext().FriendlyFire.Value = false;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
Players.OnPlayerConnected.Add((player) => {
    if (!player.Properties.Get("Faction").Value) {
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ñ—Ä–∞–∫—Ü–∏—è–º –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
        const factionIds = Object.keys(factionSystem.factions);
        const smallestFaction = factionIds.reduce((smallest, current) => 
            factionSystem.factions[current].members.length < factionSystem.factions[smallest].members.length ? 
            current : smallest, factionIds[0]);
        
        factionSystem.assignPlayerToFaction(player, smallestFaction);
    }
    
    player.Ui.Hint.Value = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–æ—Ä–æ–¥ –õ–∂–∏, ${player.NickName}!`;
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã
Teams.OnPlayerChangeTeam.Add((player) => {
    player.Spawns.Spawn();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–±–∏–π—Å—Ç–≤
Damage.OnKill.Add((killer, victim) => {
    const killerRole = factionSystem.playerRoles[killer.id]?.role;
    const victimRole = factionSystem.playerRoles[victim.id]?.role;
    
    // –ü—Ä–µ–¥–∞—Ç–µ–ª—å —É–±–∏–ª —Å–≤–æ–µ–≥–æ
    if (factionSystem.traitors.has(killer.id) && 
        factionSystem.playerRoles[killer.id]?.faction === factionSystem.playerRoles[victim.id]?.faction) {
        Chat.Broadcast(`üíÄ –ü–†–ï–î–ê–¢–ï–õ–¨–°–¢–í–û! ${killer.NickName} —É–±–∏–ª —Å–æ—é–∑–Ω–∏–∫–∞!`);
        killer.Properties.Get('Kills').Value += 1;
        killer.Properties.Get('Scores').Value += 100;
    }
    
    // –ú–∞–Ω—å—è–∫ —É–±–∏–ª –∫–æ–≥–æ-—Ç–æ
    else if (killerRole === ROLE_TYPES.MANIAC) {
        Chat.Broadcast(`üî™ –ö–†–û–í–ê–í–ê–Ø –†–ê–°–ü–†–ê–í–ê! –ú–∞–Ω—å—è–∫ —É–±–∏–ª ${victim.NickName}!`);
        killer.Properties.Get('Kills').Value += 1;
        killer.Properties.Get('Scores').Value += 75;
    }
    
    // –£–±–∏–ª–∏ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞ –∏–ª–∏ —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞
    else if (victimRole === ROLE_TYPES.DETECTIVE) {
        Chat.Broadcast("üïµÔ∏è‚Äç‚ôÇÔ∏è –î–µ—Ç–µ–∫—Ç–∏–≤ —É–±–∏—Ç! –ì–æ—Ä–æ–¥ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∑–∞—â–∏—Ç—ã!");
    } 
    else if (victimRole === ROLE_TYPES.REPORTER) {
        Chat.Broadcast("üì∞ –†–µ–ø–æ—Ä—Ç–µ—Ä —É–±–∏—Ç! –ü—Ä–∞–≤–¥–∞ –ø–æ—Ö–æ—Ä–æ–Ω–µ–Ω–∞ –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º!");
    }
    
    victim.Properties.Get('Deaths').Value += 1;
});

// –ß–∞—Ç-–∫–æ–º–∞–Ω–¥—ã
Chat.OnPlayerChat.Add((player, msg) => {
    if (msg === "/role") {
        const role = player.Properties.Get("Role").Value || ROLE_TYPES.DEFAULT;
        player.Ui.Hint.Value = `–í–∞—à–∞ —Ä–æ–ª—å: ${role}`;
        return false;
    }
    
    if (msg === "/faction") {
        const faction = player.Properties.Get("Faction").Value || "–ù–µ—Ç";
        player.Ui.Hint.Value = `–í–∞—à–∞ —Ñ—Ä–∞–∫—Ü–∏—è: ${faction}`;
        return false;
    }
    
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞
    if (msg.startsWith("/report ") && factionSystem.playerRoles[player.id]?.role === ROLE_TYPES.REPORTER) {
        const args = msg.split(" ");
        if (args.length >= 3) {
            const target = Players.Find(p => p.NickName === args[1]);
            if (target) {
                const scandalType = args[2];
                let message = "";
                
                switch (scandalType) {
                    case "corruption":
                        message = `üì∞ –°–ö–ê–ù–î–ê–õ: ${target.NickName} –∑–∞–º–µ—á–µ–Ω –≤ –∫–æ—Ä—Ä—É–ø—Ü–∏–∏!`;
                        break;
                    case "murder":
                        message = `üì∞ –ö–†–ò–ú–ò–ù–ê–õ: ${target.NickName} –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç—Å—è –≤ —É–±–∏–π—Å—Ç–≤–µ!`;
                        break;
                    default:
                        message = `üì∞ –ù–û–í–û–°–¢–¨: ${target.NickName} –∑–∞–º–µ—á–µ–Ω –≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!`;
                }
                
                Chat.Broadcast(message);
                player.Properties.Get('Scores').Value += 50;
                return false;
            }
        }
    }
    
    return true;
});

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
InitGame();

// –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
Timers.GetContext().Get("RoleAssignment").Restart(10, () => {
    factionSystem.assignSpecialRoles();
    factionSystem.assignTraitors();
    factionSystem.startDayNightCycle();
});
