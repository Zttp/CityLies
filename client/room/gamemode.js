import { DisplayValueHeader, Color, Vector3 } from 'pixel_combats/basic';
import { Game, Players, Teams, Damage, Ui, Properties, Spawns, Timers, Chat, LeaderBoard } from 'pixel_combats/room';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const KINGDOMS = {
    RED: {
        name: "üî¥ –ö—Ä–∞—Å–Ω–æ–µ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ",
        color: new Color(1, 0, 0, 0),
        spawnArea: new Vector3(-50, 0, 0)
    },
    BLUE: {
        name: "üîµ –°–∏–Ω–µ–µ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ",
        color: new Color(0, 0, 1, 0),
        spawnArea: new Vector3(50, 0, 0)
    }
};

const ROLES = {
    KING: { level: 3, name: "–ö–æ—Ä–æ–ª—å", hp: 200, color: new Color(1, 1, 0, 0) },
    NOBLE: { level: 2, name: "–î–≤–æ—Ä—è–Ω–∏–Ω", hp: 150, color: new Color(0.5, 0, 0.5, 0) },
    SOLDIER: { level: 1, name: "–°–æ–ª–¥–∞—Ç", hp: 100, color: null }
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const GameState = {
    kingdoms: {
        red: { king: null, nobles: [], members: [], peace: false, tax: 0 },
        blue: { king: null, nobles: [], members: [], peace: false, tax: 0 }
    },
    playerRoles: {},
    playerKingdoms: {},
    castleHealth: { red: 1000, blue: 1000 },
    lastAttackTime: { red: 0, blue: 0 }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
Teams.Add('RedKingdom', KINGDOMS.RED.name, KINGDOMS.RED.color);
Teams.Add('BlueKingdom', KINGDOMS.BLUE.name, KINGDOMS.BLUE.color);
const RedTeam = Teams.Get('RedKingdom');
const BlueTeam = Teams.Get('BlueKingdom');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–Ω–∞
Damage.GetContext().FriendlyFire.Value = true;

// –°–∏—Å—Ç–µ–º–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
const Resources = {
    gold: {},
    addGold: function(playerId, amount) {
        this.gold[playerId] = (this.gold[playerId] || 0) + amount;
        return this.gold[playerId];
    },
    getGold: function(playerId) {
        return this.gold[playerId] || 0;
    },
    transferGold: function(from, to, amount) {
        if (this.gold[from] < amount) return false;
        this.gold[from] -= amount;
        this.addGold(to, amount);
        return true;
    }
};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function setRole(player, role) {
    GameState.playerRoles[player.id] = role;
    player.Properties.Get('Role').Value = role.level;
    player.Properties.Get('RoleName').Value = role.name;
    player.contextedProperties.MaxHp.Value = role.hp;
    if (role.color) player.contextedProperties.SkinColor.Value = role.color;
}

function joinKingdom(player, kingdom) {
    if (GameState.playerKingdoms[player.id]) return false;
    
    const kData = GameState.kingdoms[kingdom];
    kData.members.push(player.id);
    GameState.playerKingdoms[player.id] = kingdom;
    player.Properties.Get('Kingdom').Value = kingdom;
    
    // –ü–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–æ—Ä–æ–ª–µ–º
    if (kData.members.length === 1) {
        kData.king = player.id;
        setRole(player, ROLES.KING);
        Chat.Broadcast(`üëë ${player.NickName} —Å—Ç–∞–ª –∫–æ—Ä–æ–ª–µ–º ${KINGDOMS[kingdom.toUpperCase()].name}!`);
    } else {
        setRole(player, ROLES.SOLDIER);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
    const team = kingdom === 'red' ? RedTeam : BlueTeam;
    team.Add(player);
    
    // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤ –∑–æ–Ω—É —Å–ø–∞–≤–Ω–∞
    player.Teleport(KINGDOMS[kingdom.toUpperCase()].spawnArea);
    
    return true;
}

function leaveKingdom(player) {
    const kingdom = GameState.playerKingdoms[player.id];
    if (!kingdom) return false;
    
    const kData = GameState.kingdoms[kingdom];
    const role = GameState.playerRoles[player.id];
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
    kData.members = kData.members.filter(id => id !== player.id);
    kData.nobles = kData.nobles.filter(id => id !== player.id);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∫–æ—Ä–æ–ª—å - –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–≥–æ
    if (kData.king === player.id) {
        if (kData.nobles.length > 0) {
            promotePlayer(kData.nobles[0], true);
        } else if (kData.members.length > 0) {
            promotePlayer(kData.members[0], true);
        } else {
            kData.king = null;
        }
    }
    
    // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    delete GameState.playerKingdoms[player.id];
    delete GameState.playerRoles[player.id];
    player.Properties.Get('Kingdom').Value = "-";
    player.Properties.Get('Role').Value = 0;
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    const team = kingdom === 'red' ? RedTeam : BlueTeam;
    team.Remove(player);
    
    return true;
}

function promotePlayer(targetId, silent = false) {
    const player = Players.Get(targetId);
    if (!player) return false;
    
    const kingdom = GameState.playerKingdoms[targetId];
    if (!kingdom) return false;
    
    const kData = GameState.kingdoms[kingdom];
    if (kData.king === targetId) return false;
    
    setRole(player, ROLES.NOBLE);
    kData.nobles.push(targetId);
    
    if (!silent) {
        Chat.Broadcast(`üéñÔ∏è ${player.NickName} –ø–æ–≤—ã—à–µ–Ω –¥–æ –¥–≤–æ—Ä—è–Ω–∏–Ω–∞ –≤ ${KINGDOMS[kingdom.toUpperCase()].name}!`);
    }
    
    return true;
}

function signPeaceTreaty(kingdom1, kingdom2) {
    GameState.kingdoms[kingdom1].peace = true;
    GameState.kingdoms[kingdom2].peace = true;
    Damage.GetContext().FriendlyFire.Value = false;
    
    Chat.Broadcast(`‚òÆÔ∏è ${KINGDOMS[kingdom1.toUpperCase()].name} –∏ ${KINGDOMS[kingdom2.toUpperCase()].name} –∑–∞–∫–ª—é—á–∏–ª–∏ –º–∏—Ä!`);
    return true;
}

function breakPeaceTreaty(kingdom) {
    GameState.kingdoms[kingdom].peace = false;
    Damage.GetContext().FriendlyFire.Value = true;
    
    Chat.Broadcast(`‚öîÔ∏è ${KINGDOMS[kingdom.toUpperCase()].name} —Ä–∞–∑–æ—Ä–≤–∞–ª –º–∏—Ä–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä!`);
    return true;
}

// –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
function collectTaxes(kingdom) {
    const kData = GameState.kingdoms[kingdom];
    if (!kData.king) return;
    
    const taxAmount = kData.tax;
    let totalCollected = 0;
    
    kData.members.forEach(memberId => {
        if (memberId !== kData.king) {
            const success = Resources.transferGold(memberId, kData.king, taxAmount);
            if (success) totalCollected += taxAmount;
        }
    });
    
    if (totalCollected > 0) {
        const king = Players.Get(kData.king);
        if (king) king.Ui.Hint.Value = `–°–æ–±—Ä–∞–Ω–æ –Ω–∞–ª–æ–≥–æ–≤: ${totalCollected} –∑–æ–ª–æ—Ç–∞`;
    }
}

// –ë–æ–µ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏
function attackCastle(attacker, kingdom) {
    if (GameState.kingdoms[kingdom].peace) return false;
    
    const now = Date.now();
    if (now - GameState.lastAttackTime[kingdom] < 30000) {
        attacker.Ui.Hint.Value = "–ó–∞–º–æ–∫ –º–æ–∂–Ω–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥";
        return false;
    }
    
    GameState.castleHealth[kingdom] -= 50;
    GameState.lastAttackTime[kingdom] = now;
    
    if (GameState.castleHealth[kingdom] <= 0) {
        GameState.castleHealth[kingdom] = 0;
        Chat.Broadcast(`üíÄ –ó–∞–º–æ–∫ ${KINGDOMS[kingdom.toUpperCase()].name} —Ä–∞–∑—Ä—É—à–µ–Ω!`);
        // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∑–∞–º–∫–∞
        Resources.addGold(attacker.id, 500);
    } else {
        Chat.Broadcast(`üè∞ –ó–∞–º–æ–∫ ${KINGDOMS[kingdom.toUpperCase()].name} –∞—Ç–∞–∫–æ–≤–∞–Ω! –ó–¥–æ—Ä–æ–≤—å–µ: ${GameState.castleHealth[kingdom]}/1000`);
    }
    
    return true;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
Players.OnPlayerConnected.Add(p => {
    p.Properties.Get('Gold').Value = 0;
    Resources.addGold(p.id, 100); // –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–æ–ª–æ—Ç–æ
    p.Ui.Hint.Value = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join red –∏–ª–∏ /join blue';
});

Players.OnPlayerDisconnected.Add(p => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–æ–ª–æ—Ç–æ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    p.Properties.Get('Gold').Value = Resources.getGold(p.id);
});

Teams.OnPlayerChangeTeam.Add(p => {
    p.Spawns.Spawn();
    p.Properties.Get('Kills').Value = 0;
    p.Properties.Get('Deaths').Value = 0;
});

Damage.OnDeath.Add(p => {
    p.Spawns.Spawn();
    p.Properties.Get('Deaths').Value++;
    
    // –ü–æ—Ç–µ—Ä—è –∑–æ–ª–æ—Ç–∞ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
    const lostGold = Math.floor(Resources.getGold(p.id) * 0.1);
    if (lostGold > 0) {
        Resources.addGold(p.id, -lostGold);
        p.Ui.Hint.Value = `–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ ${lostGold} –∑–æ–ª–æ—Ç–∞ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏`;
    }
});

Damage.OnKill.Add((killer, victim) => {
    if (killer.id === victim.id) return;
    
    killer.Properties.Get('Kills').Value++;
    
    // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É–±–∏–π—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–Ω–≥–∞ –∂–µ—Ä—Ç–≤—ã
    let reward = 10;
    const victimRole = GameState.playerRoles[victim.id];
    if (victimRole === ROLES.NOBLE) reward = 25;
    if (victimRole === ROLES.KING) reward = 100;
    
    Resources.addGold(killer.id, reward);
    killer.Ui.Hint.Value = `+${reward} –∑–æ–ª–æ—Ç–∞ –∑–∞ —É–±–∏–π—Å—Ç–≤–æ`;
    
    // –û—Å–æ–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —É–±–∏–π—Å—Ç–≤–æ –∫–æ—Ä–æ–ª—è
    if (victimRole === ROLES.KING) {
        Chat.Broadcast(`üíÄ –ö–æ—Ä–æ–ª—å ${victim.NickName} –±—ã–ª —É–±–∏—Ç –∏–≥—Ä–æ–∫–æ–º ${killer.NickName}!`);
    }
});

// –ß–∞—Ç-–∫–æ–º–∞–Ω–¥—ã
Chat.OnPlayerMessage.Add((p, msg) => {
    const args = msg.split(' ');
    const cmd = args[0].toLowerCase();
    const kingdom = GameState.playerKingdoms[p.id];

    try {
        switch(cmd) {
            case '/join':
                if (args.length < 2) throw "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /join red –∏–ª–∏ /join blue";
                const k = args[1].toLowerCase();
                if (k !== 'red' && k !== 'blue') throw "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ";
                if (kingdom) throw "–í—ã —É–∂–µ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ";
                return joinKingdom(p, k);
                
            case '/leave':
                if (!kingdom) throw "–í—ã –Ω–µ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ";
                return leaveKingdom(p);
                
            case '/promote':
                if (!kingdom || GameState.kingdoms[kingdom].king !== p.id) throw "–¢–æ–ª—å–∫–æ –∫–æ—Ä–æ–ª—å –º–æ–∂–µ—Ç –ø–æ–≤—ã—à–∞—Ç—å";
                if (args.length < 2) throw "–£–∫–∞–∂–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞";
                return promotePlayer(args[1]);
                
            case '/peace':
                if (!kingdom || GameState.kingdoms[kingdom].king !== p.id) throw "–¢–æ–ª—å–∫–æ –∫–æ—Ä–æ–ª—å –º–æ–∂–µ—Ç –∑–∞–∫–ª—é—á–∞—Ç—å –º–∏—Ä";
                const otherKingdom = kingdom === 'red' ? 'blue' : 'red';
                if (GameState.kingdoms[otherKingdom].king === null) throw "–í –¥—Ä—É–≥–æ–º –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ –Ω–µ—Ç –∫–æ—Ä–æ–ª—è";
                return signPeaceTreaty(kingdom, otherKingdom);
                
            case '/war':
                if (!kingdom || GameState.kingdoms[kingdom].king !== p.id) throw "–¢–æ–ª—å–∫–æ –∫–æ—Ä–æ–ª—å –º–æ–∂–µ—Ç –æ–±—ä—è–≤–ª—è—Ç—å –≤–æ–π–Ω—É";
                return breakPeaceTreaty(kingdom);
                
            case '/tax':
                if (!kingdom || GameState.kingdoms[kingdom].king !== p.id) throw "–¢–æ–ª—å–∫–æ –∫–æ—Ä–æ–ª—å –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ª–æ–≥";
                const tax = parseInt(args[1]);
                if (isNaN(tax) || tax < 0 || tax > 50) throw "–ù–∞–ª–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 50";
                GameState.kingdoms[kingdom].tax = tax;
                Chat.Broadcast(`üìú ${p.NickName} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ª–æ–≥ ${tax}% –≤ ${KINGDOMS[kingdom.toUpperCase()].name}`);
                return false;
                
            case '/collect':
                if (!kingdom || GameState.kingdoms[kingdom].king !== p.id) throw "–¢–æ–ª—å–∫–æ –∫–æ—Ä–æ–ª—å –º–æ–∂–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –Ω–∞–ª–æ–≥–∏";
                collectTaxes(kingdom);
                return false;
                
            case '/attack':
                if (!kingdom) throw "–í—ã –Ω–µ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ";
                const targetKingdom = kingdom === 'red' ? 'blue' : 'red';
                return attackCastle(p, targetKingdom);
                
            case '/gold':
                p.Ui.Hint.Value = `–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: ${Resources.getGold(p.id)}`;
                return false;
                
            case '/give':
                if (args.length < 3) throw "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /give playerId amount";
                const amount = parseInt(args[2]);
                if (isNaN(amount) || amount <= 0) throw "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É";
                if (Resources.getGold(p.id) < amount) throw "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞";
                const target = Players.Get(args[1]);
                if (!target) throw "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω";
                Resources.transferGold(p.id, target.id, amount);
                p.Ui.Hint.Value = `–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ ${amount} –∑–æ–ª–æ—Ç–∞ –∏–≥—Ä–æ–∫—É ${target.NickName}`;
                target.Ui.Hint.Value = `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${amount} –∑–æ–ª–æ—Ç–∞ –æ—Ç ${p.NickName}`;
                return false;
                
            case '/kingdom':
                if (!kingdom) throw "–í—ã –Ω–µ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ";
                const kInfo = GameState.kingdoms[kingdom];
                let info = `=== ${KINGDOMS[kingdom.toUpperCase()].name} ===\n`;
                info += `üëë –ö–æ—Ä–æ–ª—å: ${kInfo.king ? Players.Get(kInfo.king).NickName : "–ù–µ—Ç"}\n`;
                info += `üéñÔ∏è –î–≤–æ—Ä—è–Ω: ${kInfo.nobles.length}\n`;
                info += `‚öîÔ∏è –°–æ–ª–¥–∞—Ç: ${kInfo.members.length - kInfo.nobles.length - (kInfo.king ? 1 : 0)}\n`;
                info += `‚òÆÔ∏è –ú–∏—Ä–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä: ${kInfo.peace ? "–î–∞" : "–ù–µ—Ç"}\n`;
                info += `üí∞ –ù–∞–ª–æ–≥: ${kInfo.tax}%\n`;
                info += `üè∞ –ó–¥–æ—Ä–æ–≤—å–µ –∑–∞–º–∫–∞: ${GameState.castleHealth[kingdom]}/1000`;
                p.Ui.Hint.Value = info;
                return false;
                
            default:
                return true;
        }
    } catch (e) {
        p.Ui.Hint.Value = e;
        return false;
    }
});

// –¢–∞–π–º–µ—Ä—ã
Timers.GetContext().Get('GameTick').OnTimer.Add(t => {
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–º–∫–æ–≤
    Object.keys(GameState.castleHealth).forEach(k => {
        if (GameState.castleHealth[k] < 1000) {
            GameState.castleHealth[k] = Math.min(1000, GameState.castleHealth[k] + 1);
        }
    });
    
    // –ê–≤—Ç–æ–±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥
    if (!GameState.kingdoms.red.peace || !GameState.kingdoms.blue.peace) {
        const diff = RedTeam.PlayersCount - BlueTeam.PlayersCount;
        if (Math.abs(diff) > 2) {
            const fromTeam = diff > 0 ? RedTeam : BlueTeam;
            const toKingdom = diff > 0 ? 'blue' : 'red';
            
            for (const player of fromTeam.Players) {
                if (GameState.playerRoles[player.id]?.level === ROLES.SOLDIER.level) {
                    leaveKingdom(player);
                    joinKingdom(player, toKingdom);
                    break;
                }
            }
        }
    }
    
    t.RestartLoop(10);
}).RestartLoop(10);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
Ui.GetContext().TeamProp1.Value = { Team: "RedKingdom", Prop: "Kills" };
Ui.GetContext().TeamProp2.Value = { Team: "BlueKingdom", Prop: "Kills" };
LeaderBoard.PlayerLeaderBoardValues = [
    new DisplayValueHeader('Kills', '–£–±–∏–π—Å—Ç–≤–∞', '‚öîÔ∏è'),
    new DisplayValueHeader('Deaths', '–°–º–µ—Ä—Ç–∏', 'üíÄ'),
    new DisplayValueHeader('RoleName', '–†–∞–Ω–≥', 'üéñÔ∏è'),
    new DisplayValueHeader('Kingdom', '–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ', 'üè∞')
];
